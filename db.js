// Generated by LiveScript 1.5.0
(function(){
  var slice$ = [].slice;
  this.__DB__ = null;
  this.include = function(){
    var request, CONFIG, minimatch, db, Commands;
    if (this.__DB__) {
      return this.__DB__;
    }
    request = require('request');
    CONFIG = require('./environment');
    minimatch = require('minimatch');
    db = {};
    db.DB = {};
    db.spreadsheets = [];
    request.get(CONFIG.host, function(err, res){
      var data;
      if (err) {
        return console.error(err);
      }
      data = JSON.parse(res.body).data;
      if (data) {
        db.DB = JSON.parse(data);
        console.log(data);
        return console.log("==> Restored previous session from DB");
      } else {
        return console.log("==> No previous session in DB found");
      }
    }, Commands = {
      bgsave: function(cb){
        var dataToBeDumped;
        dataToBeDumped = JSON.stringify(db.DB, void 8, 2);
        request.put(CONFIG.host, {
          json: {
            data: dataToBeDumped
          }
        }, function(err, res, body){
          if (err) {
            return console.error(err);
          }
        });
        return typeof cb == 'function' ? cb() : void 8;
      },
      addSpreadsheet: function(key){
        var spreadsheets;
        key = key.split('_')[0];
        spreadsheets = db.spreadsheets.filter(function(spreadsheetKey){
          return spreadsheetKey === key;
        });
        if (!(spreadsheets.length > 0)) {
          db.spreadsheets.push(key);
        }
        return console.log(db.spreadsheets);
      },
      get: function(key, cb){
        return typeof cb == 'function' ? cb(null, db.DB[key]) : void 8;
      },
      set: function(key, val, cb){
        db.DB[key] = val;
        return typeof cb == 'function' ? cb() : void 8;
      },
      exists: function(key, cb){
        return cb(null, db.DB.hasOwnProperty(key) ? 1 : 0);
      },
      rpush: function(key, val, cb){
        var ref$, ref1$;
        ((ref1$ = (ref$ = db.DB)[key]) != null
          ? ref1$
          : ref$[key] = []).push(val);
        return typeof cb == 'function' ? cb() : void 8;
      },
      lrange: function(key, from, to, cb){
        var ref$, ref1$;
        return typeof cb == 'function' ? cb(null, (ref1$ = (ref$ = db.DB)[key]) != null
          ? ref1$
          : ref$[key] = []) : void 8;
      },
      hset: function(key, idx, val, cb){
        var ref$, ref1$;
        ((ref1$ = (ref$ = db.DB)[key]) != null
          ? ref1$
          : ref$[key] = {})[idx] = val;
        return typeof cb == 'function' ? cb() : void 8;
      },
      hgetall: function(key, cb){
        var ref$, ref1$;
        return typeof cb == 'function' ? cb(null, (ref1$ = (ref$ = db.DB)[key]) != null
          ? ref1$
          : ref$[key] = {}) : void 8;
      },
      hdel: function(key, idx){
        if (db.DB[key] != null) {
          delete db.DB[key][idx];
        }
        return typeof cb == 'function' ? cb() : void 8;
      },
      rename: function(key, key2, cb){
        var ref$, ref1$;
        db.DB[key2] = (ref1$ = (ref$ = db.DB)[key], delete ref$[key], ref1$);
        return typeof cb == 'function' ? cb() : void 8;
      },
      keys: function(select, cb){
        return typeof cb == 'function' ? cb(null, Object.keys(db.DB).filter(minimatch.filter(select))) : void 8;
      },
      del: function(keys, cb){
        var i$, len$, key;
        if (Array.isArray(keys)) {
          for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
            key = keys[i$];
            delete db.DB[key];
          }
        } else {
          delete db.DB[keys];
        }
        return typeof cb == 'function' ? cb() : void 8;
      }
    }, importAll$(db, Commands), db.multi = function(){
      var cmds, res$, i$, to$, name;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      cmds = res$;
      for (name in Commands) {
        (fn$.call(this, name));
      }
      cmds.results = [];
      cmds.exec = function(cb){
        var ref$, cmd, args, this$ = this;
        switch (false) {
        case !this.length:
          ref$ = this.shift(), cmd = ref$[0], args = ref$[1];
          db[cmd].apply(db, slice$.call(args).concat([function(_, result){
            this$.results.push(result);
            this$.exec(cb);
          }]));
          break;
        default:
          cb(null, this.results);
        }
      };
      return cmds;
      function fn$(name){
        cmds[name] = function(){
          var args, res$, i$, to$;
          res$ = [];
          for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
            res$.push(arguments[i$]);
          }
          args = res$;
          this.push([name, args]);
          return this;
        };
      }
    });
    return this.__DB__ = db;
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
